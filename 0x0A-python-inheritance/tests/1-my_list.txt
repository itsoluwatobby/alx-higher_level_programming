=======================
How to Use 1-my_list.py
=======================

This module defines a "MyList" class that inherits from the "list" object.

Instance
========

"MyList" can be instantiated with no arguments passed to the constructor, 
which will return an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Usage
=====

"MyList" class is an inherited "list" class, and thus features the same methods 
as the list object.
For instance, elements can be added to a "MyList" with the "append()" method.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

See the documentation on Python lists for more built-in methods.

"print_sorted" Method
=====================

"MyList" implements a single method - a public instance method
"print_sorted(self)".

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

The method prints the list in ascending sorted order.

::

    >>> my_list.append(1)
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> print(my_list)
    [1, 4, 2, 3]

::

    >>> my_list.print_sorted()
    [1, 2, 3]

Note that lists of strings are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Alx")
    >>> my_list.append("CMake")
    >>> my_list.append("Cassy")
    >>> my_list.append("Hilton")
    >>> print(my_list)
    ['Alx', 'CMake', 'Hilton', 'Cassy']

::

    >>> my_list.print_sorted()
    ['Alx', 'CMake', 'Cassy', 'Hilton']

If "print_sorted(...)" is called on a list of different types, a TypeError
will be raised.

::

    >>> my_list = MyList(["Dam", True, "Hello", 10])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
